---
description: Description of the app we are building in this project
globs: 
alwaysApply: true
---

# Daydream: Blending Art and Technology

You are an expert in creating interactive, comprehensive, and functionally efficient web applications for creative professionals.

Your task is to help me create a SvelteKit app, very similar to tldraw (https://tldraw.com) or Figma (https://figma.com), but with more advanced drawing and AI features.

The tech stack:
- SvelteKit, for the overall structure and routing
- Supabase, for storing and accessing data
- Fabric.js, for creating and dealing with the canvas pages
- Perfect-freehand, for dealing with drawing on the Fabric.js canvas in certain areas (see app description below)
- Svelte Flow, for diagrams with node connections
- OpenAI API, for AI responses and image generation (gpt-image-1 model for images)
- GSAP for UI animations
- SCSS for all styles

I need these basic features, necessary for a CRUD app:
- Landing page with login / signup button
- Auth page with OAuth for Google login, or through email / password. If they choose the latter, there should also be a page afterwards for the user to enter their name and profile photo (optional).
- The actual app (accessible through login) should be under the app.* subdomain, or through the /app directory. In the Sveltekit project, we can create (public) and (app) directories in /routes to separate the two.

In the actual app, there should be:
- A sidebar with a list of pages, with an option to create or delete pages, similar to tldraw or notion. There should also be a profile button at the bottom, which leads to a simple user profile page. Use the google / custom profile photo if available, or just their initials.
- A canvas for each page, where fabric.js and perfect-freehand will be used together.
- A title bar floating above the canvas, with breadcrumbs, an editable page title, and an editable page icon/emoji like notion.
- A toolbar floating above the canvas, with basic tools such as “draw,” “polygon (with options)”, “pan”, “text”, “eraser” and “move / handle”.

There are 2 types of pages — Canvas, and Drawing. We can either create drawings by themselves (which will use perfect-freehand and be very similar to tldraw), or we can also create them within Canvas pages with the “draw” tool, with the following mechanism:

The “draw” tool will first prompt the user to drag a rectangular area across the canvas, after which they can start drawing with perfect-freehand within the bounds of that rectangle. After they exit the drawing, they can re-enter to edit the drawing again with a button—but otherwise, no edits are allowed in any drawing unless the user is actively clicked into it and in edit mode. While in edit mode, there is a button to exit edit mode and save all changes. Each “drawing” should also automatically create its own separate Drawing page, with all edits in the larger canvas project being reflected in the canvas page. By default, every page is named either “Canvas _” or “Drawing _” with _ being an ascending number depending on how many have been created before.

The key feature in this app is AI integration. I will now explain this feature.

We will add the feature to ask the OpenAI Responses API in order to ask questions about, and make edits to, our drawings. The API will take as input the SVG data of our perfect-freehand drawings, in order to directly make edits to the SVGs and therefore change the rendered drawings.

For example, if I tell the API to “turn every black stroke red”, it should precisely do that and take the SVG of every stroke in the drawing and turn it red. I should also be able to ask questions about the drawing, such as “describe this drawing” or “how many circles are in this drawing” etc.

The OpenAI API key can be found in the .env file. Let’s handle the OpenAI API handling functions in its own dedicated directory / file, and then only reference them in all the components where the API is called in order to generate responses.

The app should have autosave applied automatically, adjusting for maximal performance. There should be either a “saving…” or “saved” text at all times in small font in the title bar of every canvas page, to ensure users of the status.

The aesthetic should be extremely minimal and simple, like MUJI. We can also take inspiration from Apple and Tldraw for their extremely beautiful and simple UI, with very smooth animations. The app must be extremely beautifully animated and smooth.

Always outline your plan first, and then implement. Use any other libraries / packages as are necessary to fully implement this feature. If you have questions or clarifications, ask them first before implementing until I give you explicit permission.
